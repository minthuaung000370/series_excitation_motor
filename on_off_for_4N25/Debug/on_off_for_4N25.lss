
on_off_for_4N25.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a6  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013b  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b8  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000158  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

void my_delay_ms(int n);

int main(void)
{
	DDRA = 0;	    //ADC read channel 0
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = (1<<0); //PORTB.0 output for signal
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	87 bb       	out	0x17, r24	; 23
	DDRD = (0<<2); //PORTD.2 normally low
  72:	11 ba       	out	0x11, r1	; 17
	PORTD= (0<<2); //PORTD.2 normally low, & waiting for input
  74:	12 ba       	out	0x12, r1	; 18
	GICR = (1<<INT0); //INT0 externally interrupt
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	8b bf       	out	0x3b, r24	; 59
	MCUCR= (1<<ISC01) | (0<<ISC00); // rising edge of INT0	
  7a:	92 e0       	ldi	r25, 0x02	; 2
  7c:	95 bf       	out	0x35, r25	; 53
	ADCSRA = 0x87; //0b10000111,,, ADC enable, prescaler 128
  7e:	97 e8       	ldi	r25, 0x87	; 135
  80:	96 b9       	out	0x06, r25	; 6
	ADMUX  = 0x40; //REFS0 = 1 & REFS1 = 0 AVCC same as VCC
  82:	87 b9       	out	0x07, r24	; 7
	
	sei();
  84:	78 94       	sei
  86:	ff cf       	rjmp	.-2      	; 0x86 <main+0x1a>

00000088 <my_delay_ms>:
	PORTB = (0<<0);
}

void my_delay_ms(int n)
{
	while(n--)
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	41 f0       	breq	.+16     	; 0x9c <my_delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	ef ec       	ldi	r30, 0xCF	; 207
  8e:	f7 e0       	ldi	r31, 0x07	; 7
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <my_delay_ms+0x8>
  94:	00 c0       	rjmp	.+0      	; 0x96 <my_delay_ms+0xe>
  96:	00 00       	nop
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	c1 f7       	brne	.-16     	; 0x8c <my_delay_ms+0x4>
  9c:	08 95       	ret

0000009e <__vector_1>:
    {
	}
}

ISR(INT0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	//TODO:: Please write your application code
	int delay_adc;
	ADCSRA |= (1<<ADSC);
  c4:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF)) == 0);
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <__vector_1+0x28>
	delay_adc = ADC / 100;
  ca:	24 b1       	in	r18, 0x04	; 4
  cc:	35 b1       	in	r19, 0x05	; 5
  ce:	36 95       	lsr	r19
  d0:	27 95       	ror	r18
  d2:	36 95       	lsr	r19
  d4:	27 95       	ror	r18
  d6:	ab e7       	ldi	r26, 0x7B	; 123
  d8:	b4 e1       	ldi	r27, 0x14	; 20
  da:	0e 94 91 00 	call	0x122	; 0x122 <__umulhisi3>
  de:	ec 01       	movw	r28, r24
  e0:	d6 95       	lsr	r29
  e2:	c7 95       	ror	r28
	my_delay_ms(delay_adc);
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 44 00 	call	0x88	; 0x88 <my_delay_ms>
	PORTB = (1<<0);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	88 bb       	out	0x18, r24	; 24
	my_delay_ms(10 - delay_adc);
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	8c 1b       	sub	r24, r28
  f4:	9d 0b       	sbc	r25, r29
  f6:	0e 94 44 00 	call	0x88	; 0x88 <my_delay_ms>
	PORTB = (0<<0);
  fa:	18 ba       	out	0x18, r1	; 24
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	7f 91       	pop	r23
 10e:	6f 91       	pop	r22
 110:	5f 91       	pop	r21
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__umulhisi3>:
 122:	a2 9f       	mul	r26, r18
 124:	b0 01       	movw	r22, r0
 126:	b3 9f       	mul	r27, r19
 128:	c0 01       	movw	r24, r0
 12a:	a3 9f       	mul	r26, r19
 12c:	01 d0       	rcall	.+2      	; 0x130 <__umulhisi3+0xe>
 12e:	b2 9f       	mul	r27, r18
 130:	70 0d       	add	r23, r0
 132:	81 1d       	adc	r24, r1
 134:	11 24       	eor	r1, r1
 136:	91 1d       	adc	r25, r1
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
